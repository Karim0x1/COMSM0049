#+title: Why software engineers don't get bonuses\newline{}(or Rowhammer, Meltdown and Spectre)
#+author: Joseph Hallett
#+institute: University of Bristol
#+startup: beamer
#+options: toc:nil
#+latex_class_options: [9pt,aspectratio=169]
#+beamer_header: \titlegraphic{\includegraphics[height=0.5cm]{bristol.png}}
#+beamer_font_theme: [stillsansseriflarge]serif
#+latex_header: \usepackage{fontspec}
#+latex_header: \usepackage{listings}
#+latex_header: \lstset{basicstyle=\footnotesize}
#+latex_header_extra: \setsansfont{HVD Comic Serif Pro}
#+latex_header_extra: \setmainfont{Comic Sans MS}
#+latex_header_extra: \setmonofont{ComicCodeLigatures}
#+latex_header_extra: \definecolor{UOBred}{rgb}{0.6706, 0.1216, 0.1765}
#+latex_header_extra: \setbeamercolor{palette primary}{bg=UOBred, fg=white}
#+latex_header_extra: \setbeamercolor{palette secondary}{bg=UOBred, fg=white}
#+latex_header_extra: \setbeamercolor{palette tertiary}{bg=UOBred, fg=white}
#+latex_header_extra: \setbeamercolor{palette quaternary}{bg=UOBred, fg=white}
#+latex_header_extra: \setbeamercolor{structure}{fg=UOBred}
#+latex_header_extra: \setbeamercolor{structure}{fg=UOBred}
#+latex_header_extra: \renewcommand{\alert}[1]{\textbf{#1}}

* Abstraction, abstraction...

In computer science we like to pretend that it's all digital...
- Perfect 1s and 0s.
- Computers that work exactly how the specifications say.
- Hardware can be (largely) ignored.
- Lower level details... /that's for electrical engineers not us!/

** This doesn't always work out.

* Money, money, money...

It mostly works out though...
- But this whole unit is about what happens when computers start doing weird things.

** Electrical engineers, and computer architects make mistakes
Cost of fixing hardware is big
- You cannot trivially fix a silicon wafer
- You cannot recall old hardware and change the circuits
  
Cost of fixing software is cheap
- It's just code!

** When there is a bug... its the software engineers who fix it
Consequently we have to clean up after their messes
- So software is always running late
- So we don't get a bonus =:-(=

  \vfill
  \footnotesize
(or so said my first boss)

* Plan

In this lecture we'll cover two ways hardware is broken.
- Rowhammer and DRAM
- Meltdown/Spectre and CPUs

We'll also cover how software works around it.

* DRAM glorious, DRAM!

Memory! Used to store all the things the computer is thinking about
that we can't fit in a register!
- Implemented using a /capacitor/ and a /transistor/ per bit
- /Ganged/ (arranged) into long rows (~8k bits per row)
- Placed into /banks/ of ganged rows

When we want to read a bit of memory:
- We find the row it is in.
- Activate the row by letting the capacitors discharge
- Which copies the row into an active memory buffer

DRAM needs to be /refreshed/ so the capactiors don't lose their charge over time
- Roughly every 64ms for modern hardware

* Electronic Engineering is messy

** Capacitors leak charge

** Current in wires induces current in other nearby wires

** The 1s and 0s aren't charged or uncharged capacitors
- Its whether a capacitor is currently discharging more or less than a
  threshhold voltage

But this is all fine because electronic components are large!

* Or they were...

- As memory capacity has /increased/...
- The physical dimensions of memory has got /smaller/.

  \vfill
  #+begin_quote
  ``The +Dwarves+ *Electrical engineers* tell no tale; but even as +mithril+
  *memory density* was the foundation of their wealth, so also it was
  their destruction: they delved too greedily and too deep, and
  disturbed that from which they fled, +Durin's Bane+ *Rowhammer*."

  --- *Gandalf the Greyhat*
  #+end_quote

* Flipping bits

** Paper                                                             :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.49
:END:

[[./flippingbits.png]]

** Description                                                       :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.49
:END:

Rowhammering is a well known bug in DRAM chips since ~2010

*** If you repeatedly charge and discharge a row in DRAM really quickly it can cause errors in nearby rows
Manufacturers all knew about it, but didn't really bother to document it.
- Seen as a /reliability/ issue, not a /security/ issue
- Cached memory largely fixes it.

Several papers discuss it and explore it
- Almost all RAM is vulnerable to it (to some extent)
- /Maybe/ you could do something malicious theoretically?
- Still treated as a /reliability/ issue

* Flipping bits, in practice

** Code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.49
:END:

#+begin_src asm
  code1a:
          mov eax, [X]
          mov ebx, [Y]
          clrflush [X]
          clrflush [Y]
          mfence
          jmp code1a
#+end_src

** Explanation                                                       :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.49
:END:

 Find two memory addresses X and Y that are in separate rows of RAM and:
1. Load =*X= into the active buffer
2. Load =*Y= into the active buffer
3. Kick =*X= out of the cache (so next read goes directly to RAM)
4. Kick =*Y= out of the cache (so next read goes directly to RAM)
5. Ensure that the cache is really gone
6. Repeat (as fast as you can)

* Token ASCII Art Diagram

** Diagram                                                          :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.3
:END:
#+begin_src text
          |      ! |
          +--------+
  Row n+0 |        <- X
          +--------+
  Row n+1 | !      |
          +--------+
  Row n+2 |        | 
          +--------+
  Row n+3 |      ! | 
          +--------+
  Row n+4 |        <- Y
          +--------+
          |    !   |
        
          +--------+
  Active  |X/Y/X/Y/|
          +--------+
#+end_src

** Explanation                                                       :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.69
:END:

If you perform the rowhammer with the above RAM layout
- /Eventually/ you'll get errors in the adjacent rows (the =!='s)
- This is called /single-sided/ Row Hammering 

* Double Sided Rowhammering

** Diagram                                                          :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.3
:END:
#+begin_src text
          |        |
          +--------+
  Row n+0 |      ! |
          +--------+
  Row n+1 |        <- X
          +--------+
  Row n+2 |!!!!!!!!| 
          +--------+
  Row n+3 |        <- Y 
          +--------+
  Row n+4 |   !    |   
          +--------+
          |        |
        
          +--------+
  Active  |X/Y/X/Y/|
          +--------+
#+end_src

** Explanation                                                       :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.69
:END:

If you select =X= and =Y= so there is excactly 1 row between them
- /Eventually/ you'll get errors in the adjacent rows (the =!='s)
- /Quickly/ you'll get errors in the in-between row
- This is called /double-sided/ Row Hammering 

* So what?

So we can introduce (typically) single bit errors in RAM... so what?

** Mark Seaborne and Halvar Flake (and others) continue exploring
- Discover double-sided variant of Rowhammering
- Find that its not just all RAM which is susceptible to this, but that its /all rows/ in /all ram/ (between 30--100%... but improvements later make it 100%).

They discover the bit flips are consistent
- Same bits flip every time when you Rowhammer the same rows

And even consistent between the same RAM products
- If Alice and Bob have the same make RAM from the same manufacturer
- Then if they Rowhammer the same rows the same bits will always flip

* This seems bad, but so what?
- You can violate the integrity of RAM, but is that all?
- How could you possibly use this as part of an attack to get arbitrary code execution?

* NaCl Sandbox

/Privileged/ sandbox for running /native code/ from a web browser safely.
- Checks if the code is /safe/ (i.e. doesn't contain any weird syscalls or violate safety properties)
- If so, it loads the chunks of instructions aligned on 32B boundaries

#+begin_src asm
          and eax, 0x000F                 ; Truncate address to 32 bits and mask to be 32-byte aligned
          add rax, r15                    ; Add r15, the sandbox base address
          jmp [rax]                       ; Jump to the loaded code snippet
#+end_src

\vfill
** Can we use Rowhammer to escape the sandbox?

\footnotesize
(I mean obviously we can, but its more fun if you work out how to do
it rather than me telling you...)

* Variadic Instruction Sets

X86 is a dense instruction set
- Different instructions have different lengths
- Some have multiple length

#+begin_src text
  20ea0: 48 b8 0f 05 eb 0c f4 f4 f4 f4    movabs rax, 0xf4f4f4ff40ceb050f
  20ea2:       0f 05                      syscall
  20ea4:             eb 0c                jmp 0xe
#+end_src

** Last chance to guess the exploit?

* Escaping NaCL

Code section is readable, so lets try and Rowhammer that =and eax, 0x000F=!
- Conveniently the code section is also readable (but not writable) by the loaded process so we can tell if it has worked

So the attack:
1. Load a sequence of safe code that happens to be /unsafe/ if you were to run it with a 1-bit offset
2. Rowhammer the loading code so that NaCl checks the code with no-offset, but runs it with an offset
3. Probably the program is gonna crash 'cos the loading code isn't valid
4. Or we Rowhammer the Kernel's memory and crash the entire computer
5. ...or it works?

** Luckily most unprivileged users are allowed to run crashy programs millions of times without batting an eyelid
See this course.

* Whoops!

Mark Seaborn and Halvar Flake have managed to Rowhammer their way to aribtrary code execution.
- Guess it was security bug after all... =B-)=
- Also publish a similar but fiddlier Linux root privilege escallation attack using Rowhammer

** Short term:
- =clflush= is banned in NaCl loaded code
- =clflush= is banned from non-root code (sometimes)

* Those aren't sustainable solutions...  
Buy better RAM?
- But how do you tell?

...with error correction codes (ECC)?
- Expensive though, and slower /(worth it for a server, not for a laptop...)/
- Still a potential denial of service/vulnerability if you can corrupt multiple bits at once with Rowhammer

...which refreshes faster?
- If you can't Rowhammer faster than the refresh speed the attack doesn't work
- But this slows down the /whole/ computer.

...and which refreshes neigbouring rows more often?
- More recent DRAM standards do this...
- Again, slows things down.

* Are we depressed yet?

** Left column :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.6
:END:

Have you considered taking up pottery?
- Mud is not susceptible to Rowhammer or any of the techniques covered in this course
- Mud will not make you sad (except when your bowls collapse)
- You can make bowls and mugs and /super cute/ pots!

\vfill
*** Honestly, I cannot recommend it highly enough.



** Right column :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.4
:END:

#+ATTR_LATEX: :width=".6\linewidth"
[[./pottery.jpeg]]

* Buckle up...
[[./brandnames.png]]
  
* CPU Pipelines

#+begin_src dot :file pipelines.png :exports results 
  digraph pipe {
    graph [rankdir=LR splines=true fontname="Lora"];
    node [fontname="Lora"];
    

    node [shape=box];
    subgraph clusterCPU {
      label="CPU";
      Fetch -> Decode -> Execute -> Writeback;
    }
  }
#+end_src

#+RESULTS:
[[file:pipelines.png]]

** In modern CPUs instructions take different times to complete...

So we /pipeline/ them
- As one instruction is /executing.../
- The next can be being /decoded/...
- And the next can be being /fetched/.

Significant performance gains!

* Branch Prediction

#+begin_src C++
  unsigned long factorial(unsigned long n) {
    unsigned long result = 1;

    while (n) [[likely]]
      result *= n--;

    return result
  }
#+end_src

Conditionals can cause a problem however...
- Can't load fetch the next multiply until we know if n > 0
- So pipeline stalls

** Solution
 
/Speculate/ that the loop is /likely/ to be taken...
- CPU assumes it will be and fetches anyway
- If the assumption is wrong the CPU pipeline will have to be flushed before writeback...
- ...but that should only happen once per call
- Speedup from removing the pipeline stall is bigger than the single pipeline flush

More performance gains!
- Especially with /Symmetric Multi-Threading/.

* Watch the pointer closely...

Suppose we have two arrays: =array1= and =array2=:
- What happens if we run this code?

#+begin_src C
  if (x < array1_size) [[likely]]
    y = array2[array1[x]];
#+end_src

* Which array is the pointer under?

=y= gets indexed by whatever is in =array[x]=

What about if =x > array1_size=?
#+begin_src C
  if (x < array1_size) [[likely]]
    y = array2[array1[x]];
#+end_src

* No, unfortunately that's a lemon...

The =if= statement won't succeed...

...but we /said/ it was likely to succeed so the next line will be speculatively executed anyway

#+begin_src C
  if (x < array1_size) [[likely]]
    y = array2[array1[x]];
#+end_src

And that would segfault anyway...
- And it would be mean to segfault on an instruction you never were going to execute.
- So we don't... /even if/ we've speculatively executed it.

As soon as the branch misprediction is detected start the /rollback/ process
- Undo changes to registers
- Reset exception flags
- Cancel any memory writes

** Jobs a good 'un, am I /write/ ?
  
* Just the writes?

#+begin_src C
  if (x < array1_size) [[likely]]
    y = array2[array1[x]];
#+end_src

See the caches are a separate subsystem and managed by the MMU.
- When the second line executes the page of memory containing =array2[array1[x]]= will be cached in preparation for the load into =y=
- And an exception signalled...
- That the CPU will tell the OS about when it hits writeback...
- ...which will never actually happen because the =if= will turn out to be a branch misprediction 

** Everything is still good right?

* Oh dear...

Suppose we guarantee that for every different value of =x= a different page of memory will be cached?

#+begin_src C
  if (x < array1_size) [[likely]]
    y = array2[array1[x]*4096];
#+end_src

(and that the branch will ALWAYS be mispredicted by the CPU).

* Oh dear, Oh dear...

And then we were to time how long it took to access every page of memory...

[[./pagetimes.png]]

Anyone want to guess what the value at =array1[x]= was?
- Which reading should have caused a segfault of...

* Oh dear, Oh dear, Oh dear

Suppose this attack also worked not just with C but via Javascript...

#+begin_src js
  if (index < simpleByteArray.length) {
      index = simpleByteArray[index | 0];
      index = (((index * 4096)|0) & (32*1024*1024-1))|0;
      localJunk ^= probeTable[index|0]|0;
  }
#+end_src

So you can leak a byte of memory... big deal?
- But given a few hours you could leak /all/ of memory
- On any system where you can host a webpage

** Good job nothing useful is ever in memory, eh?

- Keys, personal data, certificates, passwords...


* The Cloud

[[./cloud.jpg]]

* So how are we going to fix this?

This is the /Spectre/ vulnerability, and is part of the /Meltdown/ family of attacks:
- Meltdown :: (=CVE-2017-5754=) melts down security barriers
- Spectre :: (=CVE-2017-5753 CVE-2017-5715)= make speculative execution scary

Affects:
- All operating systems
- All CPUs with branch prediction

* No, seriously please, how do we fix this?

We have a couple of ideas:

- Disable branch prediction :: would require all new hardware, and have an enormous performance impact
- Disable caches :: would require all new hardware and have an enormous performance impact
- Disable multithreading :: doable is software for /most/ architectures, but would halve the number of available cores.  Also doesn't actually fix the issue but makes everything much harder to exploit

Which one do you think we've gone with?

* Anyone's computers feeling a bit slow?

When I was growing up everytime they made new computers they always felt /lots/ faster...
- Anyone not really noticed this recently?

We do have other mitigations other than turning SMT off...
- but none of them are perfect, and all have an impact
- and turning multithreading off really does make this /much, much/ harder to exploit

#+begin_src sh :results raw
  cat /sys/devices/system/cpu/vulnerabilities/{meltdown,spectre*}
#+end_src

#+begin_src text
Mitigation: usercopy/swapgs barriers and __user pointer sanitization
Mitigation: Enhanced IBRS, IBPB: conditional, RSB filling, PBRSB-eIBRS: SW sequence
#+end_src

And on your kernel commandline:

\footnotesize\ttfamily
#+begin_src
noibrs noibpb nopti nospectre_v2 nospectre_v1 l1tf=off
nospec_store_bypass_disable no_stf_barrier mds=off tsx=on
tsx_async_abort=off mitigations=off
#+end_src

* It isn't just you...

[[./performance.png]]

About a 25--30% performance penalty in the /worst/ case

About a 10% in general usage

* So in conclusion...

Computer hardware fundamentally broken
- RAM doesn't work
- CPUs fundamentally broken

Software can give us a solution!
- But no one is happy about it
- More cost, slower performance
- And so no bonuses for you

* My suggestion to all of you

** Left column :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.6
:END:

*** People will always need clothes!
- Sewing is fun!
- It's about an evenings work to make a hawaiian shirt!
- Sewing machines /not/ vulnerable to any attacks in this course
  - (unless they're really fancy...)
    


** Right column :BMCOL:
:PROPERTIES:
:BEAMER_opt: [t]
:BEAMER_col: 0.4
:END:

[[./sewing.jpeg]]
